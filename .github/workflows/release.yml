name: Release

on:
  push:
    branches: [main, master]

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  id-token: write

env:
  GO_VERSION: "1.25"

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@23 \
            @semantic-release/git@10 \
            @semantic-release/github@10 \
            @semantic-release/changelog@6 \
            @semantic-release/exec@6 \
            conventional-changelog-conventionalcommits@7

      - name: Semantic Release

        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running semantic-release with enhanced patch rules..."
          echo "Last tag: ${{ steps.changes.outputs.last_tag }}"
          echo "Commits since last release: ${{ steps.changes.outputs.commits_since_last }}"
          npx semantic-release

      - name: Release Summary
        run: |
          echo "=== Release Summary ==="
          echo "New release published: ${{ steps.semantic.outputs}}"
          echo "New version: v${{ steps.semantic.outputs.new_release_version }}"
          echo "Release type: ${{ steps.semantic.outputs.new_release_major_version != '' && 'major' || (steps.semantic.outputs.new_release_minor_version != '' && 'minor' || 'patch') }}"
          echo "GitHub release will be created by GoReleaser"


          # Show recent commits for debugging
          echo ""
          echo "Recent commits: $(git describe --tags --abbrev=0)"
          git log --oneline -5
  build-java:
    name: Build Java JAR
    needs: semantic-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --force --tags

      - name: Checkout release tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Checking out latest tag: $LATEST_TAG"
          git checkout $LATEST_TAG

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Java JAR
        run: |
          cd analysis/java
          ./gradlew clean shadowJar

      - name: Upload Java JAR
        uses: actions/upload-artifact@v4
        with:
          name: java-jar
          path: analysis/java/java_ast_extractor.jar
          retention-days: 1

  build-binaries:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    needs: build-java
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --force --tags

      - name: Checkout release tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Checking out latest tag: $LATEST_TAG"
          git checkout $LATEST_TAG

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download Java JAR
        uses: actions/download-artifact@v4
        with:
          name: java-jar
          path: analysis/java/

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: v2.4.8
          args: build --single-target --clean
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --force --tags

      - name: Checkout release tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Checking out latest tag: $LATEST_TAG"
          git checkout $LATEST_TAG

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: dist/
          merge-multiple: true

      - name: Download Java JAR
        uses: actions/download-artifact@v4
        with:
          name: java-jar
          path: analysis/java/

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: v2.4.8
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          SCOOP_BUCKET_GITHUB_TOKEN: ${{ secrets.SCOOP_BUCKET_GITHUB_TOKEN }}
          GITHUB_OWNER: ${{ github.repository_owner }}

