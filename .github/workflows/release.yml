name: Release

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      dry-run:
        description: "Run in dry-run mode (no actual release)"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  id-token: write

env:
  GO_VERSION: "1.25"

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@23 \
            @semantic-release/git@10 \
            @semantic-release/github@10 \
            @semantic-release/changelog@6 \
            @semantic-release/exec@6 \
            conventional-changelog-conventionalcommits@7

      - name: Semantic Release (Dry Run)
        if: github.event.inputs.dry-run == 'true'
        id: semantic-dry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run --no-ci

      - name: Check for changes since last release
        id: changes
        run: |
          # Get the last release tag
          LAST_TAG=$(git tag --list --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "last_tag=${LAST_TAG}" >> $GITHUB_OUTPUT

          if [ -z "$LAST_TAG" ]; then
            echo "No previous release found, this will be the first release"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "commits_since_last=0" >> $GITHUB_OUTPUT
          else
            # Count commits since last tag
            COMMITS_SINCE=$(git rev-list --count ${LAST_TAG}..HEAD)
            echo "commits_since_last=${COMMITS_SINCE}" >> $GITHUB_OUTPUT
            echo "Found ${COMMITS_SINCE} commits since last release (${LAST_TAG})"

            if [ "$COMMITS_SINCE" -gt 0 ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Changes detected since last release:"
              git log --oneline ${LAST_TAG}..HEAD | head -10
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No changes since last release"
            fi
          fi

      - name: Semantic Release
        if: github.event.inputs.dry-run != 'true'
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running semantic-release with enhanced patch rules..."
          echo "Last tag: ${{ steps.changes.outputs.last_tag }}"
          echo "Commits since last release: ${{ steps.changes.outputs.commits_since_last }}"
          npx semantic-release

      - name: Release Summary
        if: github.event.inputs.dry-run != 'true'
        run: |
          echo "=== Release Summary ==="
          echo "New release published: ${{ steps.semantic.outputs.new_release_published }}"
          if [ "${{ steps.semantic.outputs.new_release_published }}" = "true" ]; then
            echo "New version: v${{ steps.semantic.outputs.new_release_version }}"
            echo "Release type: ${{ steps.semantic.outputs.new_release_major_version != '' && 'major' || (steps.semantic.outputs.new_release_minor_version != '' && 'minor' || 'patch') }}"
            echo "GitHub release will be created by GoReleaser"
          else
            echo "No release was created"
            echo "This could indicate:"
            echo "  - No commits since last release"
            echo "  - Only commits that don't trigger releases (like 'docs:', 'ci:', etc.)"
            echo "  - Configuration issue"

            # Show recent commits for debugging
            echo ""
            echo "Recent commits:"
            git log --oneline -5
          fi

  goreleaser:
    name: GoReleaser
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --force --tags

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Run tests
        run: make test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          SCOOP_BUCKET_GITHUB_TOKEN: ${{ secrets.SCOOP_BUCKET_GITHUB_TOKEN }}
          GITHUB_OWNER: ${{ github.repository_owner }}

  announce:
    name: Announce Release
    needs: [semantic-release, goreleaser]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release announcement
        env:
          VERSION: v${{ needs.semantic-release.outputs.new_release_version }}
        run: |
          echo "ðŸš€ Clicky $VERSION has been released!" > announcement.txt
          echo "" >> announcement.txt
          echo "## Installation" >> announcement.txt
          echo "" >> announcement.txt
          echo "### Using Go:" >> announcement.txt
          echo "\`\`\`bash" >> announcement.txt
          echo "go install github.com/${{ github.repository }}/cmd/clicky@$VERSION" >> announcement.txt
          echo "\`\`\`" >> announcement.txt
          echo "" >> announcement.txt
          echo "### Using Homebrew (macOS/Linux):" >> announcement.txt
          echo "\`\`\`bash" >> announcement.txt
          echo "brew install ${{ github.repository_owner }}/tap/clicky" >> announcement.txt
          echo "\`\`\`" >> announcement.txt
          echo "" >> announcement.txt
          echo "### Using Docker:" >> announcement.txt
          echo "\`\`\`bash" >> announcement.txt
          echo "docker pull ghcr.io/${{ github.repository }}:$VERSION" >> announcement.txt
          echo "\`\`\`" >> announcement.txt
          echo "" >> announcement.txt
          echo "See the full changelog at: https://github.com/${{ github.repository }}/releases/tag/$VERSION" >> announcement.txt
          cat announcement.txt
