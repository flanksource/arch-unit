version: "3"

vars:
  BINARY_NAME: arch-unit
  GO_VERSION: 1.25
  MAIN_PACKAGE: .
  BIN_DIR: "{{.ROOT_DIR}}/bin"

tasks:
  default:
    desc: List available tasks
    cmds:
      - task --list

  _ginkgo:
    internal: true
    desc: Base ginkgo command that passes through all CLI args
    vars:
      FLAGS: '{{.FLAGS | default ""}}'
      PATHS: '{{.PATHS | default "./..."}}'
    cmds:
      - ginkgo run {{.FLAGS}} {{.CLI_ARGS}} {{.PATHS}}
    env:
      CGO_ENABLED: '{{.CGO_ENABLED | default "1"}}'

  build:java-jar:
    desc: Build the Java AST extractor JAR
    dir: analysis/java
    sources:
      - JavaASTExtractor.java
      - build.gradle
    generates:
      - java_ast_extractor.jar
    cmds:
      - ./gradlew clean shadowJar
    preconditions:
      - sh: command -v java
        msg: "Java 17+ is required but not installed. Please install Java to build the Java AST extractor."

  build:
    desc: Build the binary
    deps:
      - build:java-jar
    vars:
      VERSION:
        sh: git describe --tags --always 2>/dev/null || echo "dev"
      COMMIT:
        sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
      DATE:
        sh: date -u '+%Y-%m-%dT%H:%M:%SZ'
      DIRTY:
        sh: if [ -n "$(git status --porcelain 2>/dev/null)" ]; then echo "true"; else echo "false"; fi
      LDFLAGS: -s -w -X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.date={{.DATE}} -X main.dirty={{.DIRTY}}

    cmds:
      - go build -ldflags "{{.LDFLAGS}}" -o {{.BINARY_NAME}} {{.MAIN_PACKAGE}}
    sources:
      - ./**/*.go
      - analysis/java/java_ast_extractor.jar
      - go.mod
      - go.sum
    generates:
      - ./{{.BINARY_NAME}}

  install:
    desc: Install the binary to $GOPATH/bin
    deps:
      - build
    cmds:
      - mv "./{{.BINARY_NAME}}" "$GOPATH/bin/"
    sources:
      - ./**/*.go
      - go.mod
      - go.sum

  test:
    desc: Run tests

    cmds:
      - ginkgo run {{.EXTRA_ARGS}} --poll-progress-after=10s --skip-package=examples ./...

  test:ci:
    desc: Run tests with github actions output
    cmds:
      - task: test
        vars:
          EXTRA_ARGS: " --github-output "

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      # Use centralized exclusion patterns aligned with linter exclusions
      - go test -v -race -coverprofile=coverage.out $(go list ./... | grep -v '/examples/' | grep -v '/hack/' | grep -v '/vendor/' | grep -v '/build/' | grep -v '/dist/' | grep -v '/__pycache__/' | grep -v '/.git/' | grep -v '/node_modules/')
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  install-lint:
    desc: Install linters
    generates:
      - "{{.BIN_DIR}}/golangci-lint"
    cmds:
      - GOBIN={{.BIN_DIR}} go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.4.0

  lint:
    desc: Run linters with errcheck and staticcheck disabled for test files
    deps:
      - install-lint
    cmds:
      # Run golangci-lint on non-test files with all linters including errcheck and staticcheck
      # Note: unused linter has false positives, so it's disabled
      - cmd: "{{.BIN_DIR}}/golangci-lint run --disable=unused --tests=false ./..."
      # Run golangci-lint on test files with errcheck, staticcheck, and unused disabled
      # This allows test files to ignore error checks which is common in test code
      - cmd: "{{.BIN_DIR}}/golangci-lint run --disable=errcheck,staticcheck,unused ./..."
      - go vet ./...
      - go mod tidy

  fmt:
    desc: Format code
    cmds:
      - go fmt ./...
      - gofmt -s -w .

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -f {{.BINARY_NAME}}
      - rm -f coverage.out coverage.html
      - rm -rf dist/
      - rm -f analysis/java/java_ast_extractor.jar
      - rm -rf analysis/java/build/
      - rm -rf analysis/java/.gradle/
      - go clean -cache

  mod:
    desc: Download and tidy modules
    cmds:
      - go mod download
      - go mod tidy

  run:
    desc: Run the application
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}} {{.CLI_ARGS}}

  run:check:
    desc: Run check on current directory
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}} check {{.CLI_ARGS}}

  run:init:
    desc: Initialize .ARCHUNIT file
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}} init {{.CLI_ARGS}}

  docker:build:
    desc: Build Docker image
    cmds:
      - docker build -t {{.BINARY_NAME}}:latest .

  docker:run:
    desc: Run Docker container
    deps: [docker:build]
    cmds:
      - docker run --rm -v $(pwd):/workspace {{.BINARY_NAME}}:latest check /workspace

  release:
    desc: Create a new release
    cmds:
      - goreleaser release --clean

  release:snapshot:
    desc: Create a snapshot release
    cmds:
      - goreleaser release --snapshot --clean

  deps:check:
    desc: Check for dependency updates
    cmds:
      - go list -u -m all

  deps:update:
    desc: Update dependencies
    cmds:
      - go get -u ./...
      - go mod tidy

  ci:
    desc: Run CI pipeline locally
    cmds:
      - task: fmt
      - task: lint
      - task: test:ci
      - task: build

  example:go:
    desc: Run example on Go project
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}} init examples/go-project
      - ./{{.BINARY_NAME}} check examples/go-project

  example:python:
    desc: Run example on Python project
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}} init examples/python-project
      - ./{{.BINARY_NAME}} check examples/python-project
